{{- $longTermStorageType := .Values.storage.longtermStorage.type | default "filesystem" -}}
apiVersion: "pravega.pravega.io/v1beta1"
kind: "PravegaCluster"
metadata:
  name: {{ template "pravega.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "pravega.commonLabels" . | indent 4 }}
spec:
  {{- if .Values.tls }}
  tls:
    static:
      {{- if .Values.tls.secret.controller }}
      controllerSecret: {{ .Values.tls.secret.controller }}
      {{- end }}
      {{- if .Values.tls.secret.segmentStore }}
      segmentStoreSecret: {{ .Values.tls.secret.segmentStore }}
      {{- end }}
      {{- if .Values.tls.caBundle }}
      caBundle: {{ .Values.tls.caBundle }}
      {{- end }}
  {{- end }}
  authentication:
    enabled: {{ .Values.authentication.enabled }}
    {{- if .Values.authentication.enabled }}
    passwordAuthSecret: {{ .Values.authentication.passwordAuthSecret }}
    {{- if .Values.authentication.segmentStoreTokenSecret }}
    segmentStoreTokenSecret: {{ .Values.authentication.segmentStoreTokenSecret }}
    {{- end }}
    {{- if .Values.authentication.controllerTokenSecret }}
    controllerTokenSecret: {{ .Values.authentication.controllerTokenSecret }}
    {{- end }}
    {{- end }}
  version: {{ .Values.image.tag }}
  zookeeperUri: {{ .Values.zookeeperUri }}
  bookkeeperUri: {{ .Values.bookkeeperUri }}
  externalAccess:
    enabled: {{ .Values.externalAccess.enabled }}
    {{- if .Values.externalAccess.enabled }}
    type: {{ .Values.externalAccess.type }}
    {{- if .Values.externalAccess.domainName }}
    domainName: {{ .Values.externalAccess.domainName }}
    {{- end }}
    {{- end }}
  pravega:
    {{- if .Values.segmentStore.securityContext }}
    segmentStoreSecurityContext:
{{ toYaml .Values.segmentStore.securityContext | indent 6 }}
    {{- end }}
    {{- if .Values.controller.securityContext }}
    controllerSecurityContext:
{{ toYaml .Values.controller.securityContext | indent 6 }}
    {{- end }}
    {{- if .Values.controller.affinity }}
    controllerPodAffinity:
{{ toYaml .Values.controller.affinity | indent 6 }}
    {{- end }}
{{- if .Values.segmentStore.affinity }}
    segmentStorePodAffinity:
{{ toYaml .Values.segmentStore.affinity | indent 6 }}
    {{- end }}
    {{- if .Values.externalAccess.enabled }}
    controllerServiceAccountName: {{ template "pravega.fullname" . }}
    segmentStoreServiceAccountName: {{ template "pravega.fullname" . }}
    {{- if .Values.segmentStore.service.loadBalancerIP }}
    segmentStoreLoadBalancerIP: {{ .Values.segmentStore.service.loadBalancerIP  }}
    {{- end }}
    {{- if .Values.segmentStore.service.externalTrafficPolicy }}
    segmentStoreExternalTrafficPolicy:  {{ .Values.segmentStore.service.externalTrafficPolicy }}
    {{- end }}
    {{- if .Values.controller.service.type }}
    controllerExtServiceType: {{ .Values.controller.service.type }}
    {{- end }}
    {{- if .Values.controller.service.annotations }}
    controllerSvcAnnotations:
{{ toYaml .Values.controller.service.annotations | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.service.type }}
    segmentStoreExtServiceType: {{ .Values.segmentStore.service.type }}
    {{- end }}
    {{- if .Values.segmentStore.service.annotations }}
    segmentStoreSvcAnnotations:
{{ toYaml .Values.segmentStore.service.annotations | indent 6 }}
    {{- end }}
    {{- end }}
    {{- if .Values.controller.labels }}
    controllerPodLabels:
{{ toYaml .Values.controller.labels | indent 6 }}
    {{- end }}
    {{- if .Values.controller.annotations }}
    controllerPodAnnotations:
{{ toYaml .Values.controller.annotations | indent 6 }}
    {{- end }}
    {{- if .Values.controller.initContainers }}
    controllerInitContainers:
{{ toYaml .Values.controller.initContainers | indent 6 }}
    {{- end }}
    {{- if .Values.controller.tolerations }}
    controllerPodTolerations:
{{ toYaml .Values.controller.tolerations | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.labels }}
    segmentStorePodLabels:
{{ toYaml .Values.segmentStore.labels | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.annotations }}
    segmentStorePodAnnotations:
{{ toYaml .Values.segmentStore.annotations | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.initContainers }}
    segmentStoreInitContainers:
{{ toYaml .Values.segmentStore.initContainers | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.tolerations }}
    segmentStorePodTolerations:
{{ toYaml .Values.segmentStore.tolerations | indent 6 }}
    {{- end }}
    image:
      repository: {{ .Values.image.repository }}
      pullPolicy: {{ .Values.image.pullPolicy }}
    controllerReplicas: {{ .Values.controller.replicas }}
    {{- if .Values.authImplementations }}
    authImplementations:
{{ toYaml .Values.authImplementations | indent 6 }}
    {{- end }}
    {{- if .Values.controller.svcNameSuffix }}
    controllerSvcNameSuffix: {{ .Values.controller.svcNameSuffix }}
    {{- end }}
    {{- if .Values.segmentStore.stsNameSuffix }}
    segmentStoreStsNameSuffix: {{ .Values.segmentStore.stsNameSuffix }}
    {{- end }}
    {{- if .Values.segmentStore.headlessSvcNameSuffix }}
    segmentStoreHeadlessSvcNameSuffix: {{ .Values.segmentStore.headlessSvcNameSuffix }}
    {{- end }}
    {{- if .Values.controller.maxUnavailableReplicas }}
    maxUnavailableControllerReplicas: {{ .Values.controller.maxUnavailableReplicas }}
    {{- end }}
    {{- if .Values.controller.resources }}
    controllerResources:
{{ toYaml .Values.controller.resources | indent 6 }}
    {{- end }}
    segmentStoreReplicas: {{ .Values.segmentStore.replicas }}
    {{- if .Values.segmentStore.maxUnavailableReplicas }}
    maxUnavailableSegmentStoreReplicas: {{ .Values.segmentStore.maxUnavailableReplicas }}
    {{- end }}
    {{- if .Values.segmentStore.resources }}
    segmentStoreResources:
{{ toYaml .Values.segmentStore.resources | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.containerEnv }}
    segmentStoreContainerEnv:
{{ toYaml .Values.segmentStore.containerEnv | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.containers }}
    segmentStoreContainers:
{{ toYaml .Values.segmentStore.containers | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.additionalVolumes }}
    segmentStoreAdditionalVolumes:
{{ toYaml .Values.segmentStore.additionalVolumes | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.env }}
    segmentStoreEnvVars: {{ .Values.segmentStore.env }}
    {{- end }}
    {{- if .Values.controller.envVars }}
    controllerEnvVars:
{{ toYaml .Values.controller.envVars | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.secret }}
    segmentStoreSecret:
      secret: {{ .Values.segmentStore.secret.name }}
      {{- if .Values.segmentStore.secret.path }}
      mountPath: {{ .Values.segmentStore.secret.path }}
      {{- end }}
    {{- end }}
    {{- if .Values.influxDBSecret }}
    influxDBSecret:
      secret: {{ .Values.influxDBSecret.name }}
      {{- if .Values.influxDBSecret.path }}
      mountPath: {{ .Values.influxDBSecret.path }}
      {{- end }}
    {{- end }}
    {{- if .Values.controller.jvmOptions }}
    controllerjvmOptions:
{{ toYaml .Values.controller.jvmOptions | indent 6 }}
    {{- end }}
    {{- if .Values.segmentStore.jvmOptions }}
    segmentStoreJVMOptions:
{{ toYaml .Values.segmentStore.jvmOptions | indent 6 }}
    {{- end }}
    {{- if .Values.controller.probes }}
    controllerProbes:
      {{- if .Values.controller.probes.readiness }}
      readinessProbe:
        initialDelaySeconds: {{ .Values.controller.probes.readiness.initialDelaySeconds | default 20 }}
        periodSeconds: {{ .Values.controller.probes.readiness.periodSeconds | default 10 }}
        failureThreshold: {{ .Values.controller.probes.readiness.failureThreshold | default 3 }}
        successThreshold: {{ .Values.controller.probes.readiness.successThreshold | default 3 }}
        timeoutSeconds: {{ .Values.controller.probes.readiness.timeoutSeconds | default 60 }}
      {{- end }}
      {{- if .Values.controller.probes.liveness }}
      livenessProbe:
        initialDelaySeconds: {{ .Values.controller.probes.liveness.initialDelaySeconds | default 60  }}
        periodSeconds: {{ .Values.controller.probes.liveness.periodSeconds | default 15  }}
        failureThreshold: {{ .Values.controller.probes.liveness.failureThreshold | default 4 }}
        successThreshold: {{ .Values.controller.probes.liveness.successThreshold | default 1 }}
        timeoutSeconds: {{ .Values.controller.probes.liveness.timeoutSeconds | default 5 }}
      {{- end }}
    {{- end }}
    {{- if .Values.segmentStore.probes }}
    segmentStoreProbes:
      {{- if .Values.segmentStore.probes.readiness }}
      readinessProbe:
        initialDelaySeconds: {{ .Values.segmentStore.probes.readiness.initialDelaySeconds | default 10 }}
        periodSeconds: {{ .Values.segmentStore.probes.readiness.periodSeconds | default 10 }}
        failureThreshold: {{ .Values.segmentStore.probes.readiness.failureThreshold | default 30 }}
        successThreshold: {{ .Values.segmentStore.probes.readiness.successThreshold | default 1 }}
        timeoutSeconds: {{ .Values.segmentStore.probes.readiness.timeoutSeconds | default 5 }}
      {{- end }}
      {{- if .Values.segmentStore.probes.liveness }}
      livenessProbe:
        initialDelaySeconds: {{ .Values.segmentStore.probes.liveness.initialDelaySeconds | default 300  }}
        periodSeconds: {{ .Values.segmentStore.probes.liveness.periodSeconds | default 15  }}
        failureThreshold: {{ .Values.segmentStore.probes.liveness.failureThreshold | default 4 }}
        successThreshold: {{ .Values.segmentStore.probes.liveness.successThreshold | default 1 }}
        timeoutSeconds: {{ .Values.segmentStore.probes.liveness.timeoutSeconds | default 5 }}
      {{- end }}
    {{- end }}
    debugLogging: {{ .Values.debugLogging }}
    {{- if .Values.storage.cache }}
    cacheVolumeClaimTemplate:
      accessModes: [ "ReadWriteOnce" ]
      {{- if .Values.storage.cache.className }}
      storageClassName: {{ .Values.storage.cache.className }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.storage.cache.size }}
    {{- end }}
    longtermStorage:
      {{- if eq $longTermStorageType "custom" }}
      custom:
        {{- if .Values.storage.longtermStorage.custom.options }}
        options:
{{ toYaml .Values.storage.longtermStorage.custom.options | indent 10 }}
        {{- end }}
        {{- if .Values.storage.longtermStorage.custom.env }}
        env:
{{ toYaml .Values.storage.longtermStorage.custom.env | indent 10 }}
        {{- end }}
      {{- else if eq $longTermStorageType "ecs" }}
      ecs:
        configUri: {{ .Values.storage.longtermStorage.ecs.configUri }}
        bucket: {{ .Values.storage.longtermStorage.ecs.bucket }}
        prefix: {{ .Values.storage.longtermStorage.ecs.prefix }}
        credentials: {{ .Values.storage.longtermStorage.ecs.credentials }}
      {{- else if eq $longTermStorageType "hdfs"}}
      hdfs:
        uri: {{ .Values.storage.longtermStorage.hdfs.uri }}
        root: {{ .Values.storage.longtermStorage.hdfs.root }}
        replicationFactor: {{ .Values.storage.longtermStorage.hdfs.replicationFactor }}
      {{- else }}
      filesystem:
        persistentVolumeClaim:
          claimName: {{ .Values.storage.longtermStorage.filesystem.pvc | default "pravega-tier2" }}
      {{- end }}
    {{- if .Values.options }}
    options:
{{ toYaml .Values.options | indent 6 }}
    {{- end }}
